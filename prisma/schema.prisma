generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model reminders {
  id                 BigInt  @id @default(autoincrement())
  tonumber           String  @db.VarChar(255)
  reminder_sent_time String? @db.VarChar(255)
  response_status    String? @db.VarChar(255)
}

model sms_conversation_history {
  user_phone           String  @id @db.VarChar(255)
  conversation_history String
  updatedat            String? @db.VarChar(255)
  interactioncount     Int?    @db.SmallInt
}

model business {
  businessname          String  @db.VarChar(255)
  password              String? @db.VarChar(255)
  businessaddress       String? @db.VarChar(255)
  agentname             String? @db.VarChar(255)
  agentvoice            String? @db.VarChar(255)
  businessphone         String? @db.VarChar(255)
  businesshours         String? @db.VarChar(255)
  callsconnected        Int?    @default(0) @db.SmallInt
  scheduledappointments Int?    @default(0) @db.SmallInt
  rescheduledcalls      Int?    @default(0) @db.SmallInt
  roi                   Int?    @default(0) @db.SmallInt
  canceledappointments  Int?    @default(0) @db.SmallInt
  id                    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User                  User[]
}

model Account {
  id                Int     @id(map: "accounts_pkey") @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model Session {
  id           Int      @id(map: "sessions_pkey") @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model User {
  id                 Int       @id(map: "users_pkey") @default(autoincrement())
  name               String?   @db.VarChar(255)
  email              String?   @unique(map: "users_email_unique") @db.VarChar(255)
  emailVerified      DateTime? @db.Timestamptz(6)
  image              String?
  associatedbusiness String?   @db.VarChar(255)
  haschosenbusiness  Boolean?  @default(false)
  phone_number       String?   @db.VarChar(255)
  business_name      String?   @db.VarChar(255)
  business_id        String?   @db.Uuid
  business           business? @relation(fields: [business_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_business")
}

model VerificationToken {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token], map: "verification_token_pkey")
}
